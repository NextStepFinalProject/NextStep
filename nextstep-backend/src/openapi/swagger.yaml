openapi: 3.0.1
info:
  title: NextStep API
  description: API for managing all the abilities.
  version: 1.0.0

tags:
  - name: Posts
    description: Operations related to posts
  - name: Comments
    description: Operations related to comments on posts
  - name: Authentication
    description: Operations related to authentication tokens
  - name: Users
    description: Operations related to users
  - name: Resources
    description: Operations related to uploading & downloading resources
  - name: Rooms
    description: Operations related to chat rooms
  - name: Resume
    description: Operations related to resume ATS scoring
  - name: LinkedIn Jobs
    description: Operations related to LinkedIn job postings
  - name: Quizzes
    description: Operations related to job quizzes

paths:
  /post:
    get:
      tags:
        - Posts
      summary: Retrieve all posts
      parameters:
        - in: query
          name: owner
          schema:
            type: string
          description: Filter posts by owner (requires authentication if provided)
      responses:
        '200':
          description: List of posts retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '401':
          description: Unauthorized - Missing token -> when owner is provided
        '403':
          description: Forbidden - Invalid or expired token -> when owner is provided

    post:
      tags:
        - Posts
      security:
        - BearerAuth: []
      summary: Create a new post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRequest'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /post/{postId}:
    get:
      tags:
        - Posts
      summary: Retrieve all posts
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of posts retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/PostNotFound'
    put:
      tags:
        - Posts
      security:
        - BearerAuth: []
      summary: Update a post entirely - will replace the existing post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRequest'
      responses:
        '201':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/PostNotFound'

    patch:
      tags:
        - Posts
      security:
        - BearerAuth: [ ]
      summary: Update a post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRequestPartial'
      responses:
        '201':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/PostNotFound'

    delete:
      tags:
        - Posts
      security:
        - BearerAuth: [ ]
      summary: Delete a post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/PostNotFound'

  /post/{postId}/like:
    put:
      tags:
        - Posts
      security:
        - BearerAuth: []
      summary: Update like status for a specific post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the post to like or unlike
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: boolean
              description: Indicates whether to like (true) or unlike (false) the post
      responses:
        '200':
          description: Like status updated successfully
        '400':
          description: Bad request - Invalid post ID or missing required fields
          content:
            text/plain:
              examples:
                default:
                  value: "Bad Request"
                booleanBody:
                  value: "Bad Request. Body accepts `true` or `false` values only"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/PostNotFound'

  /post/like:
    get:
      tags:
        - Posts
      security:
        - BearerAuth: []
      summary: Retrieve liked posts for a specific user
      responses:
        '200':
          description: A list of liked posts for the specified user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '400':
          description: Bad request - Invalid userId
        '401':
          description: Unauthorized - Missing token

  /comment:
    get:
      tags:
        - Comments
      summary: Retrieve all comments
      responses:
        '200':
          description: List of comments retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'

    post:
      tags:
        - Comments
      security:
        - BearerAuth: []
      summary: Create a new comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/PostNotFound'

  /comment/{commentId}:
    put:
      tags:
        - Comments
      security:
        - BearerAuth: []
      summary: Update a comment
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/CommentNotFound'

    patch:
      tags:
        - Comments
      security:
        - BearerAuth: [ ]
      summary: Update a comment
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequestPartial'
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/CommentNotFound'

    delete:
      tags:
        - Comments
      security:
        - BearerAuth: []
      summary: Delete a comment
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Comment deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/CommentNotFound'

  /comment/post/{postId}:
    get:
      tags:
        - Comments
      summary: Get comments for a specific post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of comments for the post
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/PostNotFound'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User successfully registered
        '400':
          $ref: '#/components/responses/BadRequest'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: New tokens generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '401':
          description: Invalid refresh token

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Successfully logged out
        '401':
          description: Invalid refresh token

  /auth/social:
    post:
      tags:
        - Authentication
      summary: Authenticate user through social provider using Firebase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - idToken
                - authProvider
              properties:
                idToken:
                  type: string
                  description: The ID token received from Firebase authentication
                authProvider:
                  type: string
                  enum: [google, facebook]
                  description: The social provider to authenticate with
      responses:
        '200':
          description: Successfully authenticated with social provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad request - Missing idToken or authProvider, or invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating the specific issue
                    example: "Missing idToken"
              examples:
                missingIdToken:
                  value:
                    message: "Missing idToken"
                missingAuthProvider:
                  value:
                    message: "Missing authProvider"
                invalidToken:
                  value:
                    message: "Invalid token"
        '401':
          description: Invalid social authentication credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid"

  /user:
    get:
      tags:
        - Users
      security:
        - BearerAuth: [ ]
      summary: Retrieve all users
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /user/{userId}:
    get:
      tags:
        - Users
      security:
        - BearerAuth: [ ]
      summary: Retrieve a user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/UserNotFound'

    patch:
      tags:
        - Users
      security:
        - BearerAuth: [ ]
      summary: Update a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/UserNotFound'

    delete:
      tags:
        - Users
      security:
        - BearerAuth: [ ]
      summary: Delete a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/UserNotFound'

  /resource/image/user:
    post:
      tags:
        - Resources
      summary: Upload an image for a user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Image uploaded successfully and associated with the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    description: The unique identifier of the user
                  email:
                    type: string
                    description: The email of the user
                  imageFilename:
                    type: string
                    description: The filename of the uploaded image
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating the specific issue
                    example: "File too large"
              examples:
                fileTooLarge:
                  value:
                    message: "File too large"
                invalidFileType:
                  value:
                    message: "Invalid file type. Only images are allowed: /jpeg|jpg|png|gif/"
                noFileUploaded:
                  value:
                    message: "No file uploaded"
        '404':
          description: User not found
        '500':
          description: Internal server error

  /resource/image:
    post:
      tags:
        - Resources
      summary: Upload an image
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Image uploaded successfully
          content:
            text/plain:
              schema:
                description: The name of the uploaded file
                type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating the specific issue
                    example: "File too large"
              examples:
                fileTooLarge:
                  value:
                    message: "File too large"
                invalidFileType:
                  value:
                    message: "Invalid file type. Only images are allowed: /jpeg|jpg|png|gif/"
                noFileUploaded:
                  value:
                    message: "No file uploaded"
        '500':
          description: Internal server error

  /resource/image/{filename}:
    get:
      tags:
        - Resources
      summary: Retrieve an image
      parameters:
        - name: filename
          in: path
          required: true
          schema:
            type: string
          description: The name of the image file to retrieve
      responses:
        '200':
          description: Image retrieved successfully
          content:
            image/*:
              schema:
                type: string
                format: binary
        '404':
          description: Image not found
        '500':
          description: Internal server error

  /resource/resume:
    post:
      tags:
        - Resources
      summary: Upload a resume
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The resume file to upload (PDF, DOC, DOCX, TXT/TEXT)
      responses:
        '201':
          description: Resume uploaded successfully
          content:
            text/plain:
              schema:
                description: The name of the uploaded file
                type: string
        '400':
          description: Bad request
          content:
            text/plain:
              examples:
                fileTooLarge:
                  value: "File too large"
                invalidFileType:
                  value: "Invalid file type. Only PDF, DOC, DOCX and TXT/TEXT files are allowed"
                noFileUploaded:
                  value: "No file uploaded"
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /resource/resume/{filename}:
    get:
      tags:
        - Resources
      summary: Get resume file
      security:
        - BearerAuth: []
      parameters:
        - name: filename
          in: path
          required: true
          schema:
            type: string
          description: The filename of the resume
      responses:
        '200':
          description: Resume file retrieved successfully
          content:
            application/pdf:
              schema:
                type: string
                format: binary
            application/msword:
              schema:
                type: string
                format: binary
            application/vnd.openxmlformats-officedocument.wordprocessingml.document:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '404':
          description: Resume not found
        '500':
          description: Internal server error

  /resume/score/{filename}:
    get:
      tags:
        - Resume
      summary: Get score for an existing resume
      security:
        - BearerAuth: []
      parameters:
        - name: filename
          in: path
          required: true
          schema:
            type: string
          description: The filename of the resume
        - name: jobDescription
          in: query
          required: false
          schema:
            type: string
          description: Optional job description for scoring
      responses:
        '200':
          description: Resume score retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  score:
                    type: number
                    description: The ATS score of the resume
        '400':
          description: Bad request
          content:
            text/plain:
              examples:
                couldNotParseResumeFile:
                  value: "Could not parse the resume file"
        '401':
          description: Unauthorized
        '404':
          description: Resume not found
        '500':
          description: Internal server error

  /resume/streamScore/{filename}:
    get:
      tags:
        - Resume
      summary: Get stream score for an existing resume
      security:
        - BearerAuth: []
      parameters:
        - name: filename
          in: path
          required: true
          schema:
            type: string
          description: The filename of the resume
        - name: jobDescription
          in: query
          required: false
          schema:
            type: string
          description: Optional job description for scoring
      responses:
        '200':
          description: Stream resume score retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  score:
                    type: number
                    description: The stream ATS score of the resume
        '400':
          description: Bad request
          content:
            text/plain:
              examples:
                couldNotParseResumeFile:
                  value: "Could not parse the resume file"
        '401':
          description: Unauthorized
        '404':
          description: Resume not found
        '500':
          description: Internal server error

  /resume/templates:
    get:
      tags:
        - Resume
      summary: Get available resume templates
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of available resume templates retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the template (with extension)
                    content:
                      type: string
                      description: Base64 encoded content of the template file
                    type:
                      type: string
                      description: MIME type of the template file
                      enum:
                        - application/pdf
                        - application/msword
                        - application/vnd.openxmlformats-officedocument.wordprocessingml.document
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /resume/generate:
    post:
      tags:
        - Resume
      summary: Generate an improved resume based on a resume template, feedback and job description
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - feedback
                - jobDescription
                - templateName
              properties:
                feedback:
                  type: string
                  description: The feedback received from the resume scoring process
                jobDescription:
                  type: string
                  description: The job description used for scoring the resume
                templateName:
                  type: string
                  description: The name of the template to use for generating the improved resume
      responses:
        '200':
          description: The generated improved resume
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: string
                    description: Base64 encoded content of the generated resume file
                  type:
                    type: string
                    description: MIME type of the generated resume file
                    enum:
                      - application/msword
                      - application/vnd.openxmlformats-officedocument.wordprocessingml.document
        '400':
          description: Bad request - Missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating missing fields
        '401':
          description: Unauthorized - Missing or invalid authentication token
        '404':
          description: Template not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating template not found
        '500':
          description: Internal server error

  /room/user/{receiverUserId}:
    get:
      tags:
        - Rooms
      security:
        - BearerAuth: []
      summary: Get or create a room by user IDs
      parameters:
        - name: receiverUserId
          in: path
          required: true
          description: The ID of the receiver user
          schema:
            type: string
      responses:
        '200':
          description: Room found and returned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "67d5d49a9757556bd7e30939"
                  userIds:
                    type: array
                    items:
                      type: string
                    example: ["67afa72968f736f112ae1d4f", "67afa589118b00ef7c04bbee"]
                  messages:
                    type: array
                    items:
                      type: string
                    example: []
        '201':
          description: Room created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "67d5d49a9757556bd7e30939"
                  userIds:
                    type: array
                    items:
                      type: string
                    example: ["67afa72968f736f112ae1d4f", "67afa589118b00ef7c04bbee"]
                  messages:
                    type: array
                    items:
                      type: string
                    example: []
        '400':
          description: Bad Request

  /linkedin-jobs/jobs:
    get:
      tags:
        - LinkedIn Jobs
      summary: Retrieve jobs from LinkedIn based on skills and role
      parameters:
        - name: skills
          in: query
          required: true
          schema:
            type: string
          description: Comma-separated list of skills (maximum 3)
        - name: role
          in: query
          required: true
          schema:
            type: string
          description: Desired role
        - name: location
          in: query
          required: false
          schema:
            type: string
          description: Job location
        - name: dateSincePosted
          in: query
          required: false
          schema:
            type: string
          description: Date range for job postings (e.g., "past day", "past week", "past month")
        - name: jobType
          in: query
          required: false
          schema:
            type: string
          description: Type of job (e.g., "full time", "part time", "contract")
        - name: experienceLevel
          in: query
          required: false
          schema:
            type: string
          description: Experience level (e.g., "entry level", "mid level", "senior level", "all")
      responses:
        '200':
          description: List of jobs retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    position:
                      type: string
                      description: Job position
                    company:
                      type: string
                      description: Company name
                    location:
                      type: string
                      description: Job location
                    jobUrl:
                      type: string
                      description: Job posting URL
                    companyLogo:
                      type: string
                      description: URL of the company logo
                    date:
                      type: string
                      description: Date the job was posted
                    salary:
                      type: string
                      description: Salary information
        '400':
          description: Bad request - Missing skills or role
        '500':
          description: Internal server error

  /linkedin-jobs/jobs/{id}:
    get:
      tags:
        - LinkedIn Jobs
      summary: Retrieve details of a specific job by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Job ID
      responses:
        '200':
          description: Job details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  position:
                    type: string
                    description: Job position
                  company:
                    type: string
                    description: Company name
                  location:
                    type: string
                    description: Job location
                  description:
                    type: string
                    description: Detailed job description
                  jobUrl:
                    type: string
                    description: Job posting URL
                  companyLogo:
                    type: string
                    description: URL of the company logo
                  date:
                    type: string
                    description: Date the job was posted
                  salary:
                    type: string
                    description: Salary information
        '400':
          description: Bad request - Missing job ID
        '404':
          description: Job not found
        '500':
          description: Internal server error

  /quiz/raw:
    get:
      tags:
        - Quizzes
      summary: Search for quizzes based on the given parameters.
      description: Search for quizzes that best match the given tags. Matches are found in company tags, quiz tags, or quiz content. Returns quizzes sorted by number of tag matches (most relevant first).
      security:
        - BearerAuth: []
      parameters:
        - name: tags
          in: query
          required: false
          schema:
            type: string
          description: A string which contains comma separated tags.
      responses:
        '200':
          description: List of quizzes sorted by relevance (most relevant first).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Quiz'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /quiz/generate:
    post:
      tags:
        - Quizzes
      summary: Generate a quiz for a certain subject.
      description: Generate a quiz for a certain subject. The quiz is generated based on our real-world quizzes database.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - subject
              properties:
                subject:
                  type: string
                  description: The subject of the quiz to be generated (e.g., "Java Spring Boot Microservices")
                  example: "Java Spring Boot Microservices"
      responses:
        '200':
          description: A generated quiz custom-tailored for the targeted subject.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneratedQuiz'
        '400':
          description: Bad request - Missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating missing fields
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /quiz/grade:
    post:
      tags:
        - Quizzes
      summary: Grade a quiz answered by the user.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnsweredQuiz'           
      responses:
        '200':
          description: A graded quiz with tips.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GradedQuiz'
        '400':
          description: Bad request - Missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating missing fields
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

components:
  schemas:
    Post:
      type: object
      required:
        - id
        - owner
        - title
        - content
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: The post ID
        title:
          type: string
          description: The title of the post
        content:
          type: string
          description: The content of the post
        owner:
          type: string
          description: The ID of the user who owns the post
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the post was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the post was last updated

    PostRequestPartial:
      type: object
      required: []
      properties:
        title:
          type: string
          description: The title of the post
        content:
          type: string
          description: The content of the post

    PostRequest:
      allOf:
        - $ref: '#/components/schemas/PostRequestPartial'
        - type: object
          required:
            - title
            - content

    Comment:
      type: object
      required:
        - id
        - postId
        - owner
        - content
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: The unique identifier of the comment
        postId:
          type: string
          description: The ID of the post the comment belongs to
        owner:
          type: string
          description: The owner of the comment
        content:
          type: string
          description: The content of the comment
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the comment was created
        updatedAt:
          type: string
          format: date-time
          description: The timestamp when the comment was last updated

    CommentRequestPartial:
      type: object
      required: []
      properties:
        postId:
          type: string
          description: The ID of the post the comment should belong to
        content:
          type: string
          description: The content of the comment

    CommentRequest:
      allOf:
        - $ref: '#/components/schemas/CommentRequestPartial'
        - type: object
          required:
            - postId
            - content

    RefreshResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string

    LoginResponse:
      allOf:
        - $ref: '#/components/schemas/RefreshResponse'
        - type: object
          required:
            - userId
          properties:
            userId:
              type: string


    LoginRequestPartial:
      type: object
      required: [ ]
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    LoginRequest:
        allOf:
          - $ref: '#/components/schemas/LoginRequestPartial'
          - type: object
            required:
              - email
              - password

    RegisterRequestPartial:
      allOf:
        - type: object
          required: []
          properties:
            username:
              type: string
        - $ref: '#/components/schemas/LoginRequestPartial'

    RegisterRequest:
      allOf:
        - $ref: '#/components/schemas/RegisterRequestPartial'
        - type: object
          required:
            - email
            - username
            - -password

    EditUserRequest:
      allOf:
        - $ref: '#/components/schemas/RegisterRequestPartial'
        - type: object
          required: [ ]


    User:
      type: object
      required:
        - id
        - email
        - username
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: The user ID
        email:
          type: string
          format: email
          description: The email of the user
        username:
          type: string
          description: The username of the user
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the user was last updated

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string

    Quiz:
      type: object
      properties:
        _id:
          type: string
          example: "68307dc341829a3ba715b8b6"
        title:
          type: string
          example: "NOC Team Member"
        quiz_id:
          type: integer
          example: 2785
        tags:
          type: array
          items:
            type: string
          example: ["888", "רנדום לוג'יק", "NOC", "Team", "Member", "Support", "Maintenance"]
        content:
          type: string
          format: html
          description: "HTML content of the quiz, may include formatting, links, and structured interview info."
        forum_link:
          type: string
          format: uri
          example: "http://www.forum.com/f/..."

    GeneratedQuiz:
      type: object
      required:
        - _id
        - title
        - tags
        - content
        - job_role
        - company_name_en
        - company_name_he
        - process_details
        - question_list
        - answer_list
        - keywords
        - interviewer_mindset
      properties:
        _id:
          type: string
          description: Unique identifier for the generated quiz (e.g., "generated_[TIMESTAMP]").
          example: "generated_1701234567890"
        title:
          type: string
          description: A concise and relevant title for the generated quiz.
          example: "ראיון לתפקיד מפתח Java Fullstack בחברת טכנולוגיה מובילה"
        tags:
          type: array
          description: Highly relevant technical and role-based tags.
          items:
            type: string
          example: ["Java", "Spring Boot", "Microservices", "Developer", "ראיון"]
        content:
          type: string
          description: A comprehensive narrative combining the interview process and specific questions.
          example: "תהליך ראיון למפתח Java Fullstack בחברת טכנולוגיה גדולה. הראיון כלל מספר שלבים: ראיון טלפוני קצר... (full content of the generated quiz)"
        job_role:
          type: string
          description: The inferred job role for the quiz.
          example: "מפתח Java Fullstack"
        company_name_en:
          type: string
          description: English name of the company for the quiz.
          example: "Leading Tech Company"
        company_name_he:
          type: string
          description: Hebrew name of the company for the quiz.
          example: "חברת טכנולוגיה מובילה"
        process_details:
          type: string
          description: A concise summary of a typical interview process for this role/company type.
          example: "ראיון טלפוני קצר לבדיקת התאמה כללית וציפיות שכר. משימת בית קצרה..."
        question_list:
          type: array
          description: A parsed list of individual interview questions.
          items:
            type: string
          example: ["איך היית מתכנן מערכת מיקרו-שירותים?", "הסבר את הקשר בין Spring Boot ל-Spring Framework."]
        answer_list:
          type: array
          description: A corresponding list of ideal or reference answers for each question.
          items:
            type: string
          example: ["בתכנון מערכת מיקרו-שירותים גדולה, הייתי מתחיל בהגדרת גבולות הקונטקסט...", "Spring Boot הוא פרויקט מעל Spring Framework שמטרתו לפשט את תהליך הפיתוח..."]
        keywords:
          type: array
          description: Additional relevant technical or conceptual keywords for preparation.
          items:
            type: string
          example: ["REST API", "Scalability", "Design Patterns", "Concurrency"]
        interviewer_mindset:
          type: string
          description: A description of the soft skills, characteristics, and professional attributes an interviewer looks for.
          example: "מחפשים מועמד עם סקרנות טכנולוגית גבוהה, יכולת פתרון בעיות יצירתית, תקשורת ברורה ותמציתית, וגישה פרואקטיבית לשיתוף פעולה בצוות."

    AnsweredQuiz:
      type: object
      required:
        - _id
        - title
        - tags
        - content
        - job_role
        - company_name_en
        - company_name_he
        - process_details
        - question_list
        - answer_list
        - keywords
        - interviewer_mindset
      properties:
        _id:
          type: string
          description: Unique identifier for the generated quiz (e.g., "generated_[TIMESTAMP]").
          example: "generated_1701234567890"
        title:
          type: string
          description: A concise and relevant title for the generated quiz.
          example: "ראיון לתפקיד מפתח Java Fullstack בחברת טכנולוגיה מובילה"
        tags:
          type: array
          description: Highly relevant technical and role-based tags.
          items:
            type: string
          example: ["Java", "Spring Boot", "Microservices", "Developer", "ראיון"]
        content:
          type: string
          description: A comprehensive narrative combining the interview process and specific questions.
          example: "תהליך ראיון למפתח Java Fullstack בחברת טכנולוגיה גדולה. הראיון כלל מספר שלבים: ראיון טלפוני קצר... (full content of the generated quiz)"
        job_role:
          type: string
          description: The inferred job role for the quiz.
          example: "מפתח Java Fullstack"
        company_name_en:
          type: string
          description: English name of the company for the quiz.
          example: "Leading Tech Company"
        company_name_he:
          type: string
          description: Hebrew name of the company for the quiz.
          example: "חברת טכנולוגיה מובילה"
        process_details:
          type: string
          description: A concise summary of a typical interview process for this role/company type.
          example: "ראיון טלפוני קצר לבדיקת התאמה כללית וציפיות שכר. משימת בית קצרה..."
        question_list:
          type: array
          description: A parsed list of individual interview questions.
          items:
            type: string
          example: ["איך היית מתכנן מערכת מיקרו-שירותים?", "הסבר את הקשר בין Spring Boot ל-Spring Framework."]
        answer_list:
          type: array
          description: A corresponding list of ideal or reference answers for each question.
          items:
            type: string
          example: ["בתכנון מערכת מיקרו-שירותים גדולה, הייתי מתחיל בהגדרת גבולות הקונטקסט...", "Spring Boot הוא פרויקט מעל Spring Framework שמטרתו לפשט את תהליך הפיתוח..."]
        user_answer_list:
          type: array
          description: A corresponding list of user answers for each question.
          items:
            type: string
          example: ["בתכנון מערכת מיקרו-שירותים גדולה, הייתי מתחיל בהגדרת גבולות הקונטקסט...", "Spring Boot הוא פרויקט מעל Spring Framework שמטרתו לפשט את תהליך הפיתוח..."]
        keywords:
          type: array
          description: Additional relevant technical or conceptual keywords for preparation.
          items:
            type: string
          example: ["REST API", "Scalability", "Design Patterns", "Concurrency"]
        interviewer_mindset:
          type: string
          description: A description of the soft skills, characteristics, and professional attributes an interviewer looks for.
          example: "מחפשים מועמד עם סקרנות טכנולוגית גבוהה, יכולת פתרון בעיות יצירתית, תקשורת ברורה ותמציתית, וגישה פרואקטיבית לשיתוף פעולה בצוות."

    GradedQuiz:
      type: object
      required:
        - graded_answers
        - final_quiz_grade
        - final_summary_tip
      properties:
        graded_answers:
          type: array
          description: A list of individual questions with the user's answer, grade, and a tip for improvement.
          items:
            type: object
            required:
              - question
              - user_answer
              - grade
              - tip
            properties:
              question:
                type: string
                description: The original question from the quiz.
                example: "איך היית מתכנן מערכת מיקרו-שירותים (Microservices) גדולה שמטפלת במיליוני בקשות ביום?"
              user_answer:
                type: string
                description: The user's provided answer to the question.
                example: "אני חושב שהייתי משתמש בקאפקה וסרביס דיסקברי. זה עוזר עם סקאלינג."
              grade:
                type: number
                format: int32
                minimum: 0
                maximum: 100
                description: The grade for the user's answer (0-100).
                example: 85
              tip:
                type: string
                description: A professional tip for the user to improve their answer.
                example: "Consider elaborating on the specific design patterns (e.g., API Gateway, Service Discovery) and communication protocols (e.g., REST, gRPC) you would use."
        final_quiz_grade:
          type: number
          format: int32
          minimum: 0
          maximum: 100
          description: The overall average grade for all answered questions in the quiz (0-100).
          example: 78
        final_summary_tip:
          type: string
          description: A comprehensive tip for the user to improve their overall interview performance.
          example: "Overall, your technical understanding is solid. For future interviews, focus on articulating your thoughts more structured, perhaps using the STAR method for behavioral questions, and always relate your technical solutions back to business value or team collaboration, demonstrating the 'interviewer mindset' we discussed."

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /auth/login endpoint

  responses:
    BadRequest:
      description: Bad request - Missing or bad required fields
    Unauthorized:
      description: Unauthorized - Missing token
    Forbidden:
      description: Forbidden - Invalid or expired token
    PostNotFound:
        description: Post not found
    CommentNotFound:
        description: Comment not found
    UserNotFound:
        description: User not found